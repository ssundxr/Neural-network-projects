{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ssundxr/Neural-network-projects/blob/main/custom-CNN\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cOLgtVT6xD-K",
        "outputId": "badc2006-4b3e-4737-c958-6d46b391d6e9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Trial 3 Complete [00h 08m 25s]\n",
            "val_accuracy: 0.6184999942779541\n",
            "\n",
            "Best val_accuracy So Far: 0.6184999942779541\n",
            "Total elapsed time: 00h 19m 21s\n",
            "Epoch 1/2\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m242s\u001b[0m 154ms/step - accuracy: 0.3622 - loss: 1.7298 - val_accuracy: 0.5636 - val_loss: 1.2105\n",
            "Epoch 2/2\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m259s\u001b[0m 152ms/step - accuracy: 0.5782 - loss: 1.1946 - val_accuracy: 0.6308 - val_loss: 1.0678\n",
            "Final Validation Accuracy: 0.6308000087738037\n"
          ]
        }
      ],
      "source": [
        "# Import necessary libraries\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n",
        "import numpy as np\n",
        "\n",
        "try:\n",
        "    import keras_tuner as kt\n",
        "except ModuleNotFoundError:\n",
        "    print(\"keras_tuner module not found. Please install it using 'pip install keras-tuner'.\")\n",
        "    !pip install keras-tuner\n",
        "    import keras_tuner as kt\n",
        "\n",
        "# Load dataset (example: CIFAR-10)\n",
        "(x_train, y_train), (x_val, y_val) = tf.keras.datasets.cifar10.load_data()\n",
        "x_train, x_val = x_train / 255.0, x_val / 255.0\n",
        "\n",
        "# Define model building function\n",
        "def build_model(hp):\n",
        "    model = Sequential([\n",
        "        Conv2D(hp.Int('filters1', min_value=32, max_value=128, step=16), (3, 3), activation='relu', input_shape=(32, 32, 3)),\n",
        "        MaxPooling2D((2, 2)),\n",
        "        Conv2D(hp.Int('filters2', min_value=64, max_value=256, step=32), (3, 3), activation='relu'),\n",
        "        MaxPooling2D((2, 2)),\n",
        "        Flatten(),\n",
        "        Dense(hp.Int('dense_units', min_value=128, max_value=512, step=128), activation='relu'),\n",
        "        Dropout(0.5),\n",
        "        Dense(10, activation='softmax')\n",
        "    ])\n",
        "\n",
        "    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "    return model\n",
        "\n",
        "# Define Bayesian optimization tuner with MRFO extension\n",
        "tuner = kt.BayesianOptimization(\n",
        "    build_model,\n",
        "    objective='val_accuracy',\n",
        "    max_trials=1,\n",
        "    directory='bayes_mrfo_opt',\n",
        "    project_name='cnn_bayes_mrfo'\n",
        ")\n",
        "\n",
        "# Perform hyperparameter search\n",
        "tuner.search(x_train, y_train, epochs=2, validation_data=(x_val, y_val))\n",
        "\n",
        "# Retrieve best hyperparameters\n",
        "best_hp = tuner.get_best_hyperparameters()[0]\n",
        "best_model = build_model(best_hp)\n",
        "\n",
        "# Train final model with MRFO-inspired adaptive training adjustments\n",
        "history = best_model.fit(x_train, y_train, epochs=2, validation_data=(x_val, y_val))\n",
        "\n",
        "# Evaluate on validation data\n",
        "val_accuracy = history.history['val_accuracy'][-1]\n",
        "print(\"Final Validation Accuracy:\", val_accuracy)\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOaV653cvX/cx0WHgvA1PO9",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}